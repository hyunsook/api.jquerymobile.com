<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="flipswitch" namespace="fn" type="widget" widgetnamespace="mobile" event-prefix="flipswitch" init-selector=":jqmData(role=&#39;flipswitch&#39;)">
	<title>Flipswitch Widget</title>
	<desc>Creates a <placeholder name="name"/> widget</desc>
	<longdesc>
		<h2>Flip switches</h2>
		<p>The flip switch is an alternative look to the checkbox or the two-option select menu. It can be toggled by a click or a swipe.</p>
		<p>To create a flip switch add the attribute <code>data-role="flipswitch"</code> to a checkbox <code>input</code> or to a <code>select</code> which has two <code>option</code> values.</p>
		<h3>Checkbox-based flipswitch</h3>
		<p>Use the following markup to create a flipswitch based on a checkbox <code>input</code>:
<pre><code>
&lt;fieldset&gt;
	&lt;div data-role=&quot;fieldcontain&quot;&gt;
		&lt;label for=&quot;checkbox-based-flipswitch&quot;&gt;Checkbox-based:&lt;/label&gt;
		&lt;input type=&quot;checkbox&quot; id=&quot;checkbox-based-flipswitch&quot; data-role=&quot;flipswitch&quot;&gt;&lt;/input&gt;
	&lt;/div&gt;
&lt;/fieldset&gt;
</code></pre>
		<iframe src="/resources/flipswitch/example1.html" style="width:100%;height:120px;border:0px"></iframe>
		The labels for the flipswitch are controlled by the <code>onText</code> and <code>offText</code> options.</p>
		<h3>Select-based flipswitch</h3>
		<p>You can also create a flipswitch based on a <code>select</code> element:
<pre><code>
&lt;fieldset&gt;
	&lt;div data-role=&quot;fieldcontain&quot;&gt;
		&lt;label for=&quot;select-based-flipswitch&quot;&gt;Select-based:&lt;/label&gt;
		&lt;select id=&quot;select-based-flipswitch&quot; data-role=&quot;flipswitch&quot;&gt;
			&lt;option value=&quot;leave&quot;&gt;Bye&lt;/option&gt;
			&lt;option value=&quot;arrive&quot;&gt;Hi&lt;/option&gt;
		&lt;/select&gt;
	&lt;/div&gt;
&lt;/fieldset&gt;
</code></pre>
		<iframe src="/resources/flipswitch/example2.html" style="width:100%;height:120px;border:0px"></iframe>
		The labels for the flipswitch are controlled by the labels of the <code>select</code> element's <code>option</code> elements. The first option is used for the inactive, "off" state, and the second option is used for the active, "on" state.</p>

		<xi:include href="../includes/pre-rendered-common.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<p>The <placeholder name="name"/> widget adds a wrapper <code>div</code> around the <code>input</code>. In addition to the original element, the wrapper also contains two <code>span</code> elements where the two labels are stored. The first <code>span</code> is styled as a button with the text for the active state appearing outside the button's bounding box to the left. To make the <placeholder name="name"/> reachable by tabbing, you can add the <code>tabindex="1"</code> attribute to the first <code>span</code>.</p>
		<p>In the example below, pre-rendered markup for a <placeholder name="name"/> is provided. The attribute <code>data-corners="false"</code> is explicitly specified, since the absence of the <code>ui-corner-all</code> class on the wrapper element indicates that the "corners" widget option is to be false.</p>
<pre><code>
&lt;div class=&quot;ui-flipswitch ui-shadow-inset ui-bar-inherit&quot;&gt;
	&lt;span tabindex=&quot;1&quot; class=&quot;ui-flipswitch-on ui-btn ui-shadow ui-btn-inherit&quot;&gt;On&lt;/span&gt;
	&lt;span class=&quot;ui-flipswitch-off&quot;&gt;Off&lt;/span&gt;
	&lt;input type=&quot;checkbox&quot; data-role=&quot;flipswitch&quot; data-enhanced=&quot;true&quot; data-corners=&quot;false&quot; name=&quot;flip-checkbox&quot; class=&quot;ui-flipswitch-input&quot;&gt;
&lt;/div&gt;
</code></pre>
		<iframe src="/resources/flipswitch/example3.html" style="width:100%;height:120px;border:0px"></iframe>

	</longdesc>
	<added>1.4</added>
	<options>
		<option name="corners" default="true" example-value="false">
			<desc>Applies the theme button border-radius if set to true.
				<p>This option is also exposed as a data attribute: <code>data-corners="false"</code>.</p>
			</desc>
			<type name="Boolean" />
		</option>
		<xi:include href="../includes/widget-option-defaults.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-disabled.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-enhanced.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-mini.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-theme.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<option name="wrapperClass" default="null" example-value='"custom-class"'>
			<desc>It is difficult to write custom CSS for the wrapper <code>div</code> around the native <code>input</code> element generated by the framework. This option allows you to specify one or more space-separated class names to be added to the wrapper <code>div</code> element by the framework.
				<p>This option is also exposed as a data attribute: <code>data-wrapper-class="custom-class"</code>.</p>
			</desc>
		</option>
	</options>
	<events>
		<xi:include href="../includes/widget-event-create.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
	</events>
	<methods>
		<xi:include href="../includes/widget-method-destroy.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-disable.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-enable.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-method-option.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<method name="refresh">
		<example>$( ".selector" ).prop( "checked", true ).flipswitch( "refresh" );</example>

			<desc>update the <placeholder name="name"/>.
				<p>If you manipulate a <placeholder name="name"/> via JavaScript, you must call the refresh method on it to update the visual styling.</p>
			</desc>
		</method>
	</methods>
	<category slug="widgets"/>
</entry>
